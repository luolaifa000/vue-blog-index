{"remainingRequest":"D:\\developer\\www\\vue-blog-index\\node_modules\\thread-loader\\dist\\cjs.js!D:\\developer\\www\\vue-blog-index\\node_modules\\babel-loader\\lib\\index.js!D:\\developer\\www\\vue-blog-index\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\developer\\www\\vue-blog-index\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\developer\\www\\vue-blog-index\\src\\modules\\index\\user\\recover.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\developer\\www\\vue-blog-index\\src\\modules\\index\\user\\recover.vue","mtime":1584589959691},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555406884439},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1572402791037},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\babel-loader\\lib\\index.js","mtime":1565229057131},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555406884439},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\vue-loader\\lib\\index.js","mtime":1584631609333}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    var _this = this;\n\n    var validatePassCheck = function validatePassCheck(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('确认新密码不能为空'));\n      } else if (value !== _this.formCustom.password) {\n        callback(new Error('两次输入的密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      alert: {\n        type: '',\n        text: ''\n      },\n      success: false,\n      loading: false,\n      loading2: false,\n      btnText: '发送邮箱验证码',\n      formCustom: {\n        email: '',\n        captcha: '',\n        password: '',\n        repassword: ''\n      },\n      ruleCustom: {\n        email: [{\n          required: true,\n          message: '邮箱不能为空',\n          trigger: 'change'\n        }, {\n          type: 'email',\n          message: '请输入正确的电子邮箱',\n          trigger: 'blur'\n        }]\n      },\n      rulePasswd: {\n        captcha: [{\n          required: true,\n          message: '验证码不能为空',\n          trigger: 'change'\n        }],\n        password: [{\n          required: true,\n          message: '密码不能为空',\n          trigger: 'change'\n        }],\n        repassword: [{\n          required: true,\n          validator: validatePassCheck,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    handleSubmit: function handleSubmit(name) {\n      var _this2 = this;\n\n      this.$refs[name].validate(function (valid) {\n        if (valid) {\n          _this2.seedEmailFun();\n\n          _this2.loading = true;\n        }\n      });\n    },\n    // 发送邮件\n    seedEmailFun: function seedEmailFun() {\n      var _this3 = this;\n\n      var param = {\n        email: this.formCustom.email\n      };\n      this.$post('/api/v2/user/send_email', param).then(function (res) {\n        _this3.alert = {\n          type: 'success',\n          text: res.message\n        };\n        _this3.loading = false;\n      }).catch(function (err) {\n        _this3.loading = false;\n        _this3.btnText = '重新发送邮件';\n      });\n    },\n    // 提交新密码\n    codeSubmit: function codeSubmit(name) {\n      var _this4 = this;\n\n      this.$refs[name].validate(function (valid) {\n        if (valid) {\n          _this4.loading2 = true;\n\n          _this4.submitForm();\n        }\n      });\n    },\n    submitForm: function submitForm() {\n      var _this5 = this;\n\n      this.$post('/api/v2/user/check_captcha', this.formCustom).then(function (res) {\n        _this5.success = true;\n        _this5.loading2 = false;\n      }).catch(function (err) {\n        _this5.loading2 = false;\n      });\n    },\n    // 重置表单\n    handleReset: function handleReset(name) {\n      this.$refs[name].resetFields();\n    }\n  }\n};",null]}