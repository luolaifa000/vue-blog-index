{"remainingRequest":"D:\\developer\\www\\vue-blog-index\\node_modules\\babel-loader\\lib\\index.js!D:\\developer\\www\\vue-blog-index\\src\\modules\\manage\\router\\router.js","dependencies":[{"path":"D:\\developer\\www\\vue-blog-index\\src\\modules\\manage\\router\\router.js","mtime":1584502969264},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555406884439},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\babel-loader\\lib\\index.js","mtime":1565229057131}],"contextDependencies":[],"result":["import _toConsumableArray from \"D:\\\\developer\\\\www\\\\vue-blog-index\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport Vue from 'vue';\nimport store from \"@/store/index\";\nimport Router from 'vue-router';\nimport NotFound from '@/404';\nimport manage from \"./manage\";\nVue.use(Router);\nvar router = new Router({\n  // mode: 'history',\n  mode: \"hash\",\n  routes: [{\n    path: '*',\n    component: NotFound\n  }].concat(_toConsumableArray(manage)),\n  // 新开页面滚动条回到顶部，后退回到之前位置\n  scrollBehavior: function scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition;\n    } else {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n  }\n});\nrouter.beforeEach(function (to, from, next) {\n  // 使用钩子函数对路由进行权限跳转\n  // 如果用户已经登录，访问登录和注册时，自动跳转到首页\n  var isadmin = store.state.user.user.admin; // 判断该路由是否需要登录权限\n\n  if (to.meta.requireAuth) {\n    if (isadmin) {\n      // 通过vuex state获取是否管理员\n      next();\n    } else {\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        } // 将跳转的路由path作为参数，登录成功后跳转到该路由\n\n      });\n    }\n  } else {\n    next();\n  }\n\n  if (isadmin && to.path == \"/login\") {\n    next(\"/articlelist\");\n  }\n});\nexport default router;",{"version":3,"sources":["D:/developer/www/vue-blog-index/src/modules/manage/router/router.js"],"names":["Vue","store","Router","NotFound","manage","use","router","mode","routes","path","component","scrollBehavior","to","from","savedPosition","x","y","beforeEach","next","isadmin","state","user","admin","meta","requireAuth","query","redirect","fullPath"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,QAAP,MAAqB,OAArB;AAEA,OAAOC,MAAP;AAEAJ,GAAG,CAACK,GAAJ,CAAQH,MAAR;AAEA,IAAMI,MAAM,GAAG,IAAIJ,MAAJ,CAAW;AACxB;AACAK,EAAAA,IAAI,EAAE,MAFkB;AAGxBC,EAAAA,MAAM,GACJ;AACEC,IAAAA,IAAI,EAAE,GADR;AAEEC,IAAAA,SAAS,EAAEP;AAFb,GADI,4BAKDC,MALC,EAHkB;AAWxB;AACAO,EAAAA,cAZwB,0BAYTC,EAZS,EAYLC,IAZK,EAYCC,aAZD,EAYgB;AACtC,QAAIA,aAAJ,EAAmB;AACjB,aAAOA,aAAP;AACD,KAFD,MAEO;AACL,aAAO;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAP;AACD;AACF;AAlBuB,CAAX,CAAf;AAwBAV,MAAM,CAACW,UAAP,CAAkB,UAACL,EAAD,EAAKC,IAAL,EAAWK,IAAX,EAAoB;AACpC;AACA;AACA,MAAMC,OAAO,GAAGlB,KAAK,CAACmB,KAAN,CAAYC,IAAZ,CAAiBA,IAAjB,CAAsBC,KAAtC,CAHoC,CAIpC;;AACA,MAAIV,EAAE,CAACW,IAAH,CAAQC,WAAZ,EAAyB;AACvB,QAAIL,OAAJ,EAAa;AAAG;AACdD,MAAAA,IAAI;AACL,KAFD,MAEO;AACLA,MAAAA,IAAI,CAAC;AACHT,QAAAA,IAAI,EAAE,QADH;AAEHgB,QAAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAEd,EAAE,CAACe;AAAf,SAFJ,CAE+B;;AAF/B,OAAD,CAAJ;AAID;AACF,GATD,MAUK;AACHT,IAAAA,IAAI;AACL;;AAED,MAAIC,OAAO,IAAIP,EAAE,CAACH,IAAH,IAAW,QAA1B,EAAoC;AAClCS,IAAAA,IAAI,CAAC,cAAD,CAAJ;AACD;AAEF,CAvBD;AA2BA,eAAeZ,MAAf","sourcesContent":["import Vue from 'vue'\r\nimport store from \"@/store/index\"\r\n\r\nimport Router from 'vue-router'\r\nimport NotFound from '@/404'\r\n\r\nimport manage from './manage'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n  // mode: 'history',\r\n  mode: \"hash\",\r\n  routes: [\r\n    {\r\n      path: '*',\r\n      component: NotFound,\r\n    },\r\n    ...manage,\r\n\r\n  ],\r\n  // 新开页面滚动条回到顶部，后退回到之前位置\r\n  scrollBehavior(to, from, savedPosition) {\r\n    if (savedPosition) {\r\n      return savedPosition\r\n    } else {\r\n      return { x: 0, y: 0 }\r\n    }\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  // 使用钩子函数对路由进行权限跳转\r\n  // 如果用户已经登录，访问登录和注册时，自动跳转到首页\r\n  const isadmin = store.state.user.user.admin\r\n  // 判断该路由是否需要登录权限\r\n  if (to.meta.requireAuth) {\r\n    if (isadmin) {  // 通过vuex state获取是否管理员\r\n      next();\r\n    } else {\r\n      next({\r\n        path: '/login',\r\n        query: { redirect: to.fullPath }  // 将跳转的路由path作为参数，登录成功后跳转到该路由\r\n      })\r\n    }\r\n  } \r\n  else {\r\n    next();\r\n  }\r\n  \r\n  if (isadmin && to.path == \"/login\") {\r\n    next(\"/articlelist\")\r\n  }\r\n\r\n})\r\n\r\n\r\n\r\nexport default router"]}]}