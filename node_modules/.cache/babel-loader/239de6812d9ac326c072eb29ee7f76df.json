{"remainingRequest":"D:\\developer\\www\\vue-blog-index\\node_modules\\thread-loader\\dist\\cjs.js!D:\\developer\\www\\vue-blog-index\\node_modules\\babel-loader\\lib\\index.js!D:\\developer\\www\\vue-blog-index\\src\\utils\\httpIndex.js","dependencies":[{"path":"D:\\developer\\www\\vue-blog-index\\src\\utils\\httpIndex.js","mtime":1584502969285},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1555406884439},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1572402791037},{"path":"D:\\developer\\www\\vue-blog-index\\node_modules\\babel-loader\\lib\\index.js","mtime":1565229057131}],"contextDependencies":[],"result":["import axios from 'axios';\nimport router from '@/modules/index/router/router';\nimport { Notice } from 'iview';\nimport store from \"../store/index\"; // 配置开发和生产的请求接口\n\nvar service = axios.create({\n  // baseURL: process.env.VUE_APP_URL,\n  timeout: 10000\n}); // 设置header请求头，发起请求前做的事情\n\nservice.interceptors.request.use(function (config) {\n  config.headers['Authorization'] = store.state.user.token;\n  config.headers['X-Requested-With'] = 'XMLHttpRequest';\n  return config;\n}, function (error) {\n  // console.log(error) // for debug\n  Promise.reject(error);\n}); // respone拦截器，发起请求后做的事情\n\nservice.interceptors.response.use(function (res) {\n  // 当有新的token时自动更新新的token\n  if (res.headers.authorization) {\n    store.dispatch(\"Token\", res.headers.authorization);\n  } // window.vm.$loading.hide()\n  // 统一处理错误\n  // 在这里对返回的数据进行处理\n\n\n  if (res.data.status == 'success') {\n    return Promise.resolve(res.data);\n  } else {\n    Notice.error({\n      title: '错误提示',\n      desc: res.data.message,\n      duration: 2\n    }); // Message({\n    //   message: res.data.message,\n    //   type: 'error',\n    //   duration: 2000\n    // })\n  } // 打印错误信息\n\n\n  return Promise.reject(res.data);\n}, function (error) {\n  if (error.response.status == 401) {\n    // 登录过期\n    Notice.warning({\n      title: '登录提示',\n      desc: error.response.data.message,\n      duration: 2,\n      onClose: function onClose() {\n        store.dispatch(\"Logout\");\n        router.push({\n          path: '/login',\n          query: {\n            redirect: window.location.hash.substr(1)\n          }\n        });\n      }\n    }); // Message({\n    //   message: error.response.data.message,\n    //   type: 'error',\n    //   duration: 2000,\n    //   onClose() {\n    //     store.dispatch(\"Logout\");\n    //     router.push({ \n    //       path: '/login', \n    //       query: { redirect: window.location.hash.substr(1) }\n    //     })\n    //   },\n    // })\n  } else if (error.response.status == 422) {\n    // token过期\n    Notice.warning({\n      title: '温馨提示',\n      desc: error.response.data.message,\n      duration: 2\n    });\n    setTimeout(function () {\n      router.push({\n        path: \"/login\",\n        query: {\n          redirect: window.location.hash.substr(1)\n        }\n      });\n    }, 1500);\n  } else if (error.response.status == 403) {\n    // 没有权限\n    Notice.warning({\n      title: '用户权限提示',\n      desc: error.response.data.message,\n      duration: 2,\n      onClose: function onClose() {\n        store.dispatch(\"Logout\");\n        router.push('/login');\n      }\n    });\n  } else if (error.response.status == 500) {\n    // 服务器连接失败\n    Notice.error({\n      title: '网络提示',\n      desc: '服务器连接失败，请稍后再试',\n      duration: 2\n    });\n  } else {\n    Notice.error({\n      title: '错误提示 ' + error.response.status,\n      desc: error.response.data.message,\n      duration: 2\n    });\n  }\n\n  return Promise.reject(error);\n});\nexport default service;",null]}